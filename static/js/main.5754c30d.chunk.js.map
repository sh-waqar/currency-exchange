{"version":3,"sources":["helpers/validateInput.js","redux/modules/rate.js","redux/modules/exchange.js","redux/modules/index.js","components/Container.js","colors.js","components/AppShell.js","api/index.js","components/Header.js","components/ExchangeButton.js","helpers/formatCurrency.js","components/ExchangeRate.js","components/SwapButton.js","pages/Exchange/PocketWrapper.js","pages/Exchange/index.js","App.js","redux/configureStore.js","serviceWorker.js","index.js"],"names":["value","result","exec","initialState","isLoading","hasError","RATE_FETCH_STARTED","RATE_FETCH_SUCCEEDED","RATE_FETCH_FAILED","pockets","EUR","currency","amount","USD","GBP","selectedCurrency","source","target","currentValue","lastActiveInput","MAX_AMOUNT","CHANGE_AMOUNT","EXCHANGE_CURRENCY","CHANGE_CURRENCY_PAIR","SWAP_CURRENCY_PAIR","getSelectedCurrency","state","exchange","getCurrentValue","getPockets","getSourceCurrency","createSelector","getTargetCurrency","getSourceAmount","getBalance","getActiveInput","getCurrentRate","rate","sourceCurrency","targetCurrency","getHasLowBalance","sourceAmount","parseFloat","getIsExchangeDisabled","hasLowBalance","parsedAmount","isNaN","getPocketCurrencies","Object","keys","getSupportedPockets","filter","pocket","getRealTimeValue","Big","div","toFixed","times","combineReducers","action","type","origin","opposite","validAmount","validateInput","maxAllowedAmount","split","length","oppositeAmount","toString","targetAmount","minus","add","rates","base","styled","colors","fetchExchangeRate","a","async","fetch","join","response","json","Error","Wrapper","CloseBtn","button","Title","h1","Header","onClose","aria-label","data-testid","onClick","config","browserLocale","navigator","language","Intl","NumberFormat","style","format","ExchangeRate","targetRate","sourceRateFormat","formatCurrency","minimumFractionDigits","targetRateFormat","maximumFractionDigits","props","BalanceWrapper","CurrencySelector","select","Balance","lowBalance","InputWrapper","Sign","span","ExchangeInput","AutosizeInput","connect","realTimeValue","isActive","balance","dispatch","ownProps","onCurrencyChange","changeCurrencyPair","onAmountChange","changeAmount","supportedPockets","onChange","map","key","autoFocus","placeholder","FormWrapper","form","InfoRow","ErrorMessage","Exchange","scheduleRateFetcher","clearFetcherInstance","updateRates","fetcherInstance","setInterval","fetchRate","fetchRateSuccess","fetchRateError","handleVisibilityChange","isVisible","clearInterval","closeSection","alert","submitForm","evt","exchangeCurrency","preventDefault","this","isExchangeDisabled","rateHasError","swapPockets","onSubmit","SwapButton","role","ExchangeButton","disabled","React","Component","mapStateToProps","createStructuredSelector","pocketCurrencies","rateIsLoading","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","configureStore","App","Container","AppShell","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5754c30d.chunk.js","sourcesContent":["export default value => {\n  const regex = /^[0-9]+\\.?[0-9]{0,2}/;\n  const result = regex.exec(value);\n\n  return result !== null ? result[0] : '';\n};\n","const initialState = {\n  isLoading: false,\n  hasError: false\n};\n\n// Actions\n\nexport const RATE_FETCH_STARTED = 'rate/RATE_FETCH_STARTED';\nexport const RATE_FETCH_SUCCEEDED = 'rate/RATE_FETCH_SUCCEEDED';\nexport const RATE_FETCH_FAILED = 'rate/RATE_FETCH_FAILED';\n\n// Action creators\n\nexport function fetchRate() {\n  return {\n    type: RATE_FETCH_STARTED\n  };\n}\n\nexport function fetchRateSuccess(rates) {\n  return {\n    type: RATE_FETCH_SUCCEEDED,\n    rates\n  };\n}\n\nexport function fetchRateError() {\n  return {\n    type: RATE_FETCH_FAILED\n  };\n}\n\n// Reducers\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case RATE_FETCH_STARTED: {\n      return {\n        ...state,\n        isLoading: true,\n        hasError: false\n      };\n    }\n\n    case RATE_FETCH_SUCCEEDED: {\n      const { rates } = action;\n\n      return {\n        ...state,\n        [rates.base]: rates.rates,\n        isLoading: false,\n        hasError: false\n      };\n    }\n\n    case RATE_FETCH_FAILED: {\n      return {\n        ...state,\n        isLoading: false,\n        hasError: true\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\n// Selectors\n\nexport const getRate = state => state.rate || {};\n\nexport const getIsRateLoading = state => state.rate.isLoading;\n\nexport const getRateHasError = state => state.rate.hasError;\n","import Big from 'big.js';\nimport { createSelector } from 'reselect';\n\nimport validateInput from 'helpers/validateInput';\nimport { getRate } from 'redux/modules/rate';\n\nconst initialState = {\n  pockets: {\n    EUR: {\n      currency: 'EUR',\n      amount: '230'\n    },\n    USD: {\n      currency: 'USD',\n      amount: '350'\n    },\n    GBP: {\n      currency: 'GBP',\n      amount: '650'\n    }\n  },\n  selectedCurrency: {\n    source: 'EUR',\n    target: 'GBP'\n  },\n  currentValue: {\n    source: '',\n    target: ''\n  },\n  lastActiveInput: {\n    source: false,\n    target: false\n  }\n};\n\nconst MAX_AMOUNT = 10000000000000 - 1; // 9.99 Trillion\n\n// Actions\n\nexport const CHANGE_AMOUNT = 'exchange/CHANGE_AMOUNT';\nexport const EXCHANGE_CURRENCY = 'exchange/EXCHANGE_CURRENCY';\nexport const CHANGE_CURRENCY_PAIR = 'exchange/CHANGE_CURRENCY_PAIR';\nexport const SWAP_CURRENCY_PAIR = 'exchange/SWAP_CURRENCY_PAIR';\n\n// Action creators\n\nexport function exchangeCurrency() {\n  return {\n    type: EXCHANGE_CURRENCY\n  };\n}\n\nexport function changeAmount(origin, amount, rate) {\n  return {\n    type: CHANGE_AMOUNT,\n    origin,\n    amount,\n    rate\n  };\n}\n\nexport function changeCurrencyPair(origin, currency) {\n  return {\n    type: CHANGE_CURRENCY_PAIR,\n    origin,\n    currency\n  };\n}\n\nexport function swapCurrencyPair() {\n  return {\n    type: SWAP_CURRENCY_PAIR\n  };\n}\n\n// Reducers\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case CHANGE_CURRENCY_PAIR: {\n      const { origin, currency } = action;\n\n      return {\n        ...state,\n        selectedCurrency: {\n          ...state.selectedCurrency,\n          [origin]: currency\n        },\n        currentValue: {\n          source: '',\n          target: ''\n        }\n      };\n    }\n\n    case SWAP_CURRENCY_PAIR: {\n      return {\n        ...state,\n        selectedCurrency: {\n          source: state.selectedCurrency.target,\n          target: state.selectedCurrency.source\n        },\n        currentValue: {\n          source: state.currentValue.target,\n          target: state.currentValue.source\n        },\n        lastActiveInput: {\n          source: state.lastActiveInput.target,\n          target: state.lastActiveInput.source\n        }\n      };\n    }\n\n    case CHANGE_AMOUNT: {\n      const { origin, amount, rate = 1 } = action;\n      const opposite = origin === 'source' ? 'target' : 'source';\n      const validAmount = validateInput(amount);\n      const maxAllowedAmount =\n        origin === 'source' ? MAX_AMOUNT : Big(MAX_AMOUNT).times(rate);\n      const lastActiveInput = {\n        [origin]: true,\n        [opposite]: false\n      };\n\n      if (validAmount === '') {\n        return {\n          ...state,\n          lastActiveInput,\n          currentValue: {\n            source: '',\n            target: ''\n          }\n        };\n      }\n\n      if (parseFloat(validAmount) > maxAllowedAmount) {\n        return state;\n      }\n\n      const parsedAmount =\n        validAmount.split('.').length === 2 ? validAmount : Big(validAmount);\n\n      const oppositeAmount =\n        origin === 'source'\n          ? Big(parsedAmount)\n              .times(rate)\n              .toFixed(2)\n          : Big(parsedAmount)\n              .div(rate)\n              .toFixed(2);\n\n      return {\n        ...state,\n        lastActiveInput,\n        currentValue: {\n          [origin]: parsedAmount.toString(),\n          [opposite]: oppositeAmount.toString()\n        }\n      };\n    }\n\n    case EXCHANGE_CURRENCY: {\n      const sourceCurrency = state.selectedCurrency.source;\n      const sourceAmount = state.currentValue.source;\n\n      const targetCurrency = state.selectedCurrency.target;\n      const targetAmount = state.currentValue.target;\n\n      return {\n        ...state,\n        pockets: {\n          ...state.pockets,\n          [sourceCurrency]: {\n            ...state.pockets[sourceCurrency],\n            amount: Big(state.pockets[sourceCurrency].amount)\n              .minus(sourceAmount)\n              .toString()\n          },\n          [targetCurrency]: {\n            ...state.pockets[targetCurrency],\n            amount: Big(state.pockets[targetCurrency].amount)\n              .add(targetAmount)\n              .toString()\n          }\n        },\n        currentValue: {\n          source: '',\n          target: ''\n        }\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\n// Selectors\n\nexport const getSelectedCurrency = state => state.exchange.selectedCurrency;\nexport const getCurrentValue = state => state.exchange.currentValue;\nexport const getPockets = state => state.exchange.pockets || {};\n\nexport const getSourceCurrency = createSelector(\n  getSelectedCurrency,\n  selectedCurrency => selectedCurrency.source\n);\n\nexport const getTargetCurrency = createSelector(\n  getSelectedCurrency,\n  selectedCurrency => selectedCurrency.target\n);\n\nexport const getSourceAmount = createSelector(\n  getCurrentValue,\n  currentValue => currentValue.source\n);\n\nexport const getBalance = createSelector(\n  getPockets,\n  getSelectedCurrency,\n  (pockets, { source, target }) => ({\n    source: pockets[source].amount,\n    target: pockets[target].amount\n  })\n);\n\nexport const getActiveInput = state => state.exchange.lastActiveInput;\n\nexport const getCurrentRate = createSelector(\n  getRate,\n  getSourceCurrency,\n  getTargetCurrency,\n  (rate, sourceCurrency, targetCurrency) =>\n    rate[sourceCurrency] && rate[sourceCurrency][targetCurrency]\n);\n\nexport const getHasLowBalance = createSelector(\n  getSourceCurrency,\n  getSourceAmount,\n  getPockets,\n  (sourceCurrency, sourceAmount, pockets) =>\n    parseFloat(sourceAmount) > parseFloat(pockets[sourceCurrency].amount)\n);\n\nexport const getIsExchangeDisabled = createSelector(\n  getHasLowBalance,\n  getSourceAmount,\n  (hasLowBalance, sourceAmount) => {\n    const parsedAmount = parseFloat(sourceAmount);\n\n    return isNaN(parsedAmount) || parsedAmount === 0 || hasLowBalance;\n  }\n);\n\nexport const getPocketCurrencies = createSelector(getPockets, pockets =>\n  Object.keys(pockets)\n);\n\nexport const getSupportedPockets = createSelector(\n  getPocketCurrencies,\n  getSelectedCurrency,\n  (pockets, { source, target }) => ({\n    source: pockets.filter(pocket => pocket !== target),\n    target: pockets.filter(pocket => pocket !== source)\n  })\n);\n\nexport const getRealTimeValue = createSelector(\n  getCurrentRate,\n  getCurrentValue,\n  (rate = 1, { source, target }) => {\n    const parsedAmount = parseFloat(source);\n\n    if (isNaN(parsedAmount) || parsedAmount === 0) {\n      return {\n        source: '',\n        target: ''\n      };\n    }\n\n    return {\n      source: Big(target)\n        .div(rate)\n        .toFixed(2),\n      target: Big(source)\n        .times(rate)\n        .toFixed(2)\n    };\n  }\n);\n","import { combineReducers } from 'redux';\n\nimport exchange from './exchange';\nimport rate from './rate';\n\nexport default combineReducers({\n  exchange,\n  rate\n});\n","import styled from '@emotion/styled';\n\nexport default styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n`;\n","export default {\n  gray: '#f3f4f5',\n  lightGray: '#475b6b',\n  blue: '#0056b2',\n  pink: '#eb008d'\n};\n","import styled from '@emotion/styled';\n\nimport colors from 'colors';\n\nexport default styled.div`\n  max-width: 550px;\n  width: 100%;\n  height: 660px;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  border: 1px solid ${colors.gray};\n  border-radius: 16px;\n  background-color: ${colors.gray};\n  overflow: hidden;\n`;\n","const API_URL = 'https://api.exchangeratesapi.io/latest';\n\nexport const fetchExchangeRate = async (source, pockets) => {\n  try {\n    const response = await fetch(\n      `${API_URL}?base=${source}&symbols=${pockets.join(',')}`\n    );\n\n    return response.json();\n  } catch (e) {\n    throw new Error(e);\n  }\n};\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding: 0 12px;\n  background-color: #fff;\n`;\n\nconst CloseBtn = styled.button`\n  border: 0;\n  background-color: transparent;\n  font-size: 28px;\n  cursor: pointer;\n`;\n\nconst Title = styled.h1`\n  font-size: 22px;\n  font-weight: 400;\n  margin-left: 10px;\n`;\n\nconst Header = ({ onClose }) => (\n  <Wrapper>\n    <CloseBtn\n      aria-label=\"Close currency exchange section\"\n      data-testid=\"close-button\"\n      onClick={onClose}\n    >\n      &times;\n    </CloseBtn>\n    <Title>Exchange</Title>\n  </Wrapper>\n);\n\nexport default Header;\n","import styled from '@emotion/styled';\n\nimport colors from 'colors';\n\nexport default styled.button`\n  background-color: ${colors.pink};\n  color: #fff;\n  font-size: 14px;\n  padding: 12px;\n  width: calc(100% - 36px);\n  margin: 0 18px 20px;\n  border: 0;\n  border-radius: 22px;\n  font-weight: 500;\n  font-size: 16px;\n  cursor: pointer;\n  box-shadow: 0px 4px 8px 2px #eb008d52;\n  transition: background-color 250ms ease-in-out;\n\n  &:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n\n    &:hover {\n      background-color: ${colors.pink};\n    }\n  }\n  &:hover {\n    background-color: #cc097e;\n  }\n`;\n","export default (config = {}) => {\n  const browserLocale = navigator.language;\n\n  return Intl.NumberFormat(browserLocale, { style: 'currency', ...config })\n    .format;\n};\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\n\nimport colors from 'colors';\nimport formatCurrency from 'helpers/formatCurrency';\n\nconst Wrapper = styled.div`\n  color: ${colors.blue};\n  background-color: #fff;\n  border: 2px solid ${colors.gray};\n  padding: 4px 16px;\n  border-radius: 12px;\n  font-size: 14px;\n`;\n\nconst ExchangeRate = ({ sourceCurrency, targetCurrency, targetRate }) => {\n  const sourceRateFormat = formatCurrency({\n    currency: sourceCurrency,\n    minimumFractionDigits: 0\n  });\n  const targetRateFormat = formatCurrency({\n    currency: targetCurrency,\n    maximumFractionDigits: 4\n  });\n\n  return (\n    <Wrapper data-testid=\"exchange-rate\">\n      <span data-testid=\"source-currency-rate\">{sourceRateFormat(1)}</span>\n      {' = '}\n      <span data-testid=\"current-rate\">\n        {targetRate ? targetRateFormat(targetRate) : '...'}\n      </span>\n    </Wrapper>\n  );\n};\n\nExchangeRate.propTypes = {\n  sourceCurrency: PropTypes.string.isRequired,\n  targetCurrency: PropTypes.string.isRequired,\n  targetRate: PropTypes.number\n};\n\nexport default ExchangeRate;\n","import styled from '@emotion/styled';\n\nimport colors from 'colors';\n\nexport default styled.button`\n  width: 32px;\n  height: 32px;\n  background-color: #fff;\n  border: 2px solid ${colors.gray};\n  font-size: 14px;\n  border-radius: 100%;\n  color: ${colors.blue};\n  text-align: center;\n  cursor: pointer;\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { connect } from 'react-redux';\nimport AutosizeInput from 'react-input-autosize';\nimport PropTypes from 'prop-types';\n\nimport {\n  changeCurrencyPair,\n  changeAmount,\n  getHasLowBalance,\n  getRealTimeValue,\n  getCurrentRate,\n  getActiveInput,\n  getCurrentValue,\n  getBalance\n} from 'redux/modules/exchange';\n\nimport colors from 'colors';\nimport formatCurrency from 'helpers/formatCurrency';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0 12px;\n  background-color: ${props =>\n    ({\n      source: '#fff',\n      target: colors.gray\n    }[props.origin])};\n  height: 120px;\n`;\n\nconst BalanceWrapper = styled.div`\n  min-width: 130px;\n`;\n\nconst CurrencySelector = styled.select`\n  background-color: transparent;\n  border: 0;\n  font-size: 24px;\n  cursor: pointer;\n`;\n\nconst Balance = styled.div`\n  color: ${props => (props.lowBalance ? 'red' : colors.lightGray)};\n  font-size: 14px;\n  padding-top: 8px;\n  padding-left: 8px;\n`;\n\nconst InputWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst Sign = styled.span`\n  font-size: 28px;\n  vertical-align: top;\n`;\n\nconst ExchangeInput = styled(AutosizeInput)`\n  & input {\n    border: 0;\n    font-size: 28px;\n    text-align: right;\n    background-color: transparent;\n\n    &::placeholder {\n      color: #8b959e;\n    }\n  }\n`;\n\nconst PocketWrapper = ({\n  origin,\n  currency,\n  balance,\n  amount,\n  rate,\n  isActive,\n  realTimeValue,\n  lowBalance,\n  supportedPockets,\n  onCurrencyChange,\n  onAmountChange\n}) => (\n  <Wrapper origin={origin}>\n    <BalanceWrapper>\n      <CurrencySelector\n        data-testid={`${origin}-currency-selector`}\n        value={currency}\n        aria-label={\n          origin === 'source'\n            ? 'Select source currency'\n            : 'Select target currency'\n        }\n        onChange={({ target }) => onCurrencyChange(target.value)}\n      >\n        {supportedPockets.map(pocket => (\n          <option key={pocket}>{pocket}</option>\n        ))}\n      </CurrencySelector>\n      <Balance\n        data-testid={`${origin}-balance`}\n        lowBalance={origin === 'source' && lowBalance}\n      >\n        Balance: {formatCurrency({ currency })(balance)}\n      </Balance>\n    </BalanceWrapper>\n    <InputWrapper>\n      {parseFloat(amount) > 0 && <Sign>{origin === 'source' ? '-' : '+'}</Sign>}\n      <ExchangeInput\n        data-testid={`${origin}-input`}\n        type=\"text\"\n        autoFocus={origin === 'source'}\n        aria-label={\n          origin === 'source' ? 'Enter source amount' : 'Enter target amount'\n        }\n        placeholder=\"0\"\n        value={isActive ? amount : realTimeValue}\n        onChange={({ target }) => onAmountChange(target.value, rate)}\n      />\n    </InputWrapper>\n  </Wrapper>\n);\n\nPocketWrapper.propTypes = {\n  origin: PropTypes.oneOf(['source', 'target']).isRequired,\n  currency: PropTypes.string.isRequired,\n  balance: PropTypes.string.isRequired,\n  amount: PropTypes.string.isRequired,\n  rate: PropTypes.number,\n  isActive: PropTypes.bool.isRequired,\n  realTimeValue: PropTypes.string.isRequired,\n  lowBalance: PropTypes.bool.isRequired,\n  supportedPockets: PropTypes.array.isRequired,\n  onCurrencyChange: PropTypes.func.isRequired,\n  onAmountChange: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = (state, props) => ({\n  realTimeValue: getRealTimeValue(state)[props.origin],\n  isActive: getActiveInput(state)[props.origin],\n  balance: getBalance(state)[props.origin],\n  amount: getCurrentValue(state)[props.origin],\n  lowBalance: getHasLowBalance(state),\n  rate: getCurrentRate(state)\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  onCurrencyChange: currency => {\n    dispatch(changeCurrencyPair(ownProps.origin, currency));\n  },\n  onAmountChange: (amount, rate) => {\n    dispatch(changeAmount(ownProps.origin, amount, rate));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PocketWrapper);\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport PropTypes from 'prop-types';\nimport PageVisibility from 'react-page-visibility';\n\nimport {\n  exchangeCurrency,\n  swapCurrencyPair,\n  getPocketCurrencies,\n  getIsExchangeDisabled,\n  getCurrentRate,\n  getSupportedPockets,\n  getSourceCurrency,\n  getTargetCurrency\n} from 'redux/modules/exchange';\nimport {\n  fetchRate,\n  fetchRateSuccess,\n  fetchRateError,\n  getIsRateLoading,\n  getRateHasError\n} from 'redux/modules/rate';\nimport { fetchExchangeRate } from 'api';\n\nimport Header from 'components/Header';\nimport ExchangeButton from 'components/ExchangeButton';\nimport ExchangeRate from 'components/ExchangeRate';\nimport SwapButton from 'components/SwapButton';\n\nimport PocketWrapper from './PocketWrapper';\n\nconst FormWrapper = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  flex-grow: 1;\n`;\n\nconst InfoRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  margin-top: -16px;\n  padding: 0 12px;\n`;\n\nconst ErrorMessage = styled.div`\n  padding: 12px;\n  background-color: #000;\n  color: #fff;\n  margin: 0 18px 20px;\n  border-radius: 4px;\n  text-align: center;\n`;\n\nclass Exchange extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.scheduleRateFetcher(this.props.sourceCurrency);\n  }\n\n  componentDidUpdate({ sourceCurrency }) {\n    const shouldFetch = sourceCurrency !== this.props.sourceCurrency;\n\n    if (shouldFetch) {\n      this.scheduleRateFetcher(this.props.sourceCurrency);\n    }\n  }\n\n  componentWillUnmount() {\n    this.clearFetcherInstance();\n  }\n\n  scheduleRateFetcher = source => {\n    const pockets = this.props.supportedPockets.target;\n\n    // Clear interval instance if already there\n    this.clearFetcherInstance();\n\n    this.updateRates(source, pockets);\n    this.fetcherInstance = setInterval(\n      () => this.updateRates(source, pockets),\n      10000\n    );\n  };\n\n  updateRates = async (source, pockets) => {\n    this.props.fetchRate(source);\n\n    try {\n      const rates = await fetchExchangeRate(source, pockets);\n\n      this.props.fetchRateSuccess(rates);\n    } catch (e) {\n      this.props.fetchRateError(source);\n    }\n  };\n\n  handleVisibilityChange = isVisible => {\n    if (isVisible) {\n      this.scheduleRateFetcher(this.props.sourceCurrency);\n    } else {\n      this.clearFetcherInstance();\n    }\n  };\n\n  clearFetcherInstance = () => {\n    if (!this.fetcherInstance) {\n      return;\n    }\n\n    clearInterval(this.fetcherInstance);\n    this.fetcherInstance = null;\n  };\n\n  closeSection = () => {\n    alert('Closing section');\n  };\n\n  submitForm = evt => {\n    this.props.exchangeCurrency();\n    evt.preventDefault();\n  };\n\n  render() {\n    const {\n      sourceCurrency,\n      targetCurrency,\n      targetRate,\n      isExchangeDisabled,\n      rateHasError,\n      supportedPockets,\n      swapPockets\n    } = this.props;\n\n    return (\n      <PageVisibility onChange={this.handleVisibilityChange}>\n        <>\n          <Header onClose={this.closeSection} />\n          <FormWrapper onSubmit={this.submitForm}>\n            <div>\n              <PocketWrapper\n                origin=\"source\"\n                currency={sourceCurrency}\n                supportedPockets={supportedPockets.source}\n              />\n\n              <InfoRow>\n                <SwapButton\n                  type=\"button\"\n                  data-testid=\"swap-button\"\n                  aria-label=\"Swap source and target currencies\"\n                  onClick={swapPockets}\n                >\n                  &#8645;\n                </SwapButton>\n                <ExchangeRate\n                  sourceCurrency={sourceCurrency}\n                  targetCurrency={targetCurrency}\n                  targetRate={targetRate}\n                />\n                <div />\n              </InfoRow>\n\n              <PocketWrapper\n                origin=\"target\"\n                currency={targetCurrency}\n                supportedPockets={supportedPockets.target}\n              />\n            </div>\n            {rateHasError && (\n              <ErrorMessage role=\"alert\" data-testid=\"error-message\">\n                Fetching exchange rates failed\n              </ErrorMessage>\n            )}\n            {!rateHasError && (\n              <ExchangeButton\n                type=\"submit\"\n                data-testid=\"exchange-button\"\n                disabled={isExchangeDisabled}\n              >\n                Exchange\n              </ExchangeButton>\n            )}\n          </FormWrapper>\n        </>\n      </PageVisibility>\n    );\n  }\n}\n\nExchange.propTypes = {\n  pocketCurrencies: PropTypes.array.isRequired,\n  targetRate: PropTypes.number,\n  sourceCurrency: PropTypes.string.isRequired,\n  targetCurrency: PropTypes.string.isRequired,\n  supportedPockets: PropTypes.shape({\n    source: PropTypes.array.isRequired,\n    target: PropTypes.array.isRequired\n  }).isRequired,\n  isExchangeDisabled: PropTypes.bool.isRequired,\n  exchangeCurrency: PropTypes.func.isRequired,\n  swapPockets: PropTypes.func.isRequired,\n  fetchRate: PropTypes.func.isRequired,\n  fetchRateSuccess: PropTypes.func.isRequired,\n  fetchRateError: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = createStructuredSelector({\n  pocketCurrencies: getPocketCurrencies,\n  targetRate: getCurrentRate,\n  supportedPockets: getSupportedPockets,\n  sourceCurrency: getSourceCurrency,\n  targetCurrency: getTargetCurrency,\n  isExchangeDisabled: getIsExchangeDisabled,\n  rateIsLoading: getIsRateLoading,\n  rateHasError: getRateHasError\n});\n\nconst mapDispatchToProps = dispatch => ({\n  exchangeCurrency: () => {\n    dispatch(exchangeCurrency());\n  },\n  swapPockets: () => {\n    dispatch(swapCurrencyPair());\n  },\n  fetchRate: source => {\n    dispatch(fetchRate(source));\n  },\n  fetchRateSuccess: rates => {\n    dispatch(fetchRateSuccess(rates));\n  },\n  fetchRateError: source => {\n    dispatch(fetchRateError(source));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Exchange);\n","import React from 'react';\nimport { Provider } from 'react-redux';\n\nimport 'normalize.css';\nimport 'index.css';\n\nimport configureStore from 'redux/configureStore';\n\nimport Container from 'components/Container';\nimport AppShell from 'components/AppShell';\nimport Exchange from 'pages/Exchange';\n\nconst store = configureStore({});\n\nconst App = () => (\n  <Provider store={store}>\n    <Container>\n      <AppShell>\n        <Exchange />\n      </AppShell>\n    </Container>\n  </Provider>\n);\n\nexport default App;\n","import { createStore } from 'redux';\n\nimport rootReducer from './modules';\n\nexport default (initialState = {}) =>\n  createStore(\n    rootReducer,\n    initialState,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  );\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}