{"version":3,"sources":["redux/modules/exchange.js","redux/modules/rate.js","redux/modules/index.js","components/Container.js","colors.js","components/AppShell.js","api/index.js","components/Header.js","components/ExchangeButton.js","helpers/formatCurrency.js","components/ExchangeRate.js","components/SwapButton.js","pages/Exchange/PocketWrapper.js","pages/Exchange/index.js","App.js","redux/configureStore.js","serviceWorker.js","index.js"],"names":["initialState","pockets","EUR","currency","amount","USD","GBP","selectedCurrency","source","target","currentValue","fixDecimalPoints","number","Math","floor","CHANGE_AMOUNT","EXCHANGE_CURRENCY","CHANGE_CURRENCY_PAIR","SWAP_CURRENCY_PAIR","isExchangeDisabled","sourceCurrency","sourceAmount","parseFloat","SET_EXCHANGE_RATE","combineReducers","exchange","state","action","type","origin","rate","opposite","fixedAmount","oppositeAmount","Big","times","div","toString","targetCurrency","targetAmount","minus","add","rates","base","styled","colors","fetchRate","a","async","fetch","join","then","res","json","Wrapper","CloseBtn","button","Title","h1","Header","config","browserLocale","navigator","language","Intl","NumberFormat","style","format","ExchangeRate","targetRate","sourceRateFormat","formatCurrency","minimumFractionDigits","targetRateFormat","maximumFractionDigits","props","BalanceWrapper","CurrencySelector","select","Balance","lowBalance","ExchangeInput","input","connect","ignoredCurrency","supportedPockets","Object","keys","balance","dispatch","ownProps","onCurrencyChange","changeCurrencyPair","onAmountChange","changeAmount","value","onChange","filter","pocket","map","key","autoFocus","placeholder","min","ContentWrapper","InfoRow","Exchange","scheduleRateFetcher","clearFetcherInstance","updateRates","fetcherInstance","setInterval","setExchangeRate","handleVisibilityChange","isVisible","clearInterval","this","exchangeDisabled","swapPockets","exchangeCurrency","SwapButton","onClick","ExchangeButton","disabled","React","Component","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","configureStore","App","Container","AppShell","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dd14cc92.chunk.js","sourcesContent":["import Big from 'big.js';\n\nconst initialState = {\n  pockets: {\n    EUR: {\n      currency: 'EUR',\n      amount: '230'\n    },\n    USD: {\n      currency: 'USD',\n      amount: '350'\n    },\n    GBP: {\n      currency: 'GBP',\n      amount: '650'\n    }\n  },\n  selectedCurrency: {\n    source: 'EUR',\n    target: 'GBP'\n  },\n  currentValue: {\n    source: '',\n    target: ''\n  }\n};\n\n// Helpers\nconst fixDecimalPoints = number => Math.floor(number * 100) / 100;\n\n// Actions\n\nexport const CHANGE_AMOUNT = 'exchange/CHANGE_AMOUNT';\nexport const EXCHANGE_CURRENCY = 'exchange/EXCHANGE_CURRENCY';\nexport const CHANGE_CURRENCY_PAIR = 'exchange/CHANGE_CURRENCY_PAIR';\nexport const SWAP_CURRENCY_PAIR = 'exchange/SWAP_CURRENCY_PAIR';\n\n// Action creators\n\nexport function exchangeCurrency() {\n  return {\n    type: EXCHANGE_CURRENCY\n  };\n}\n\nexport function changeAmount(origin, amount, rate) {\n  return {\n    type: CHANGE_AMOUNT,\n    origin,\n    amount: amount && parseFloat(amount),\n    rate\n  };\n}\n\nexport function changeCurrencyPair(origin, currency) {\n  return {\n    type: CHANGE_CURRENCY_PAIR,\n    origin,\n    currency\n  };\n}\n\nexport function swapCurrencyPair() {\n  return {\n    type: SWAP_CURRENCY_PAIR\n  };\n}\n\n// Reducers\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case CHANGE_CURRENCY_PAIR: {\n      const { origin, currency } = action;\n\n      return {\n        ...state,\n        selectedCurrency: {\n          ...state.selectedCurrency,\n          [origin]: currency\n        },\n        currentValue: {\n          source: '',\n          target: ''\n        }\n      };\n    }\n\n    case SWAP_CURRENCY_PAIR: {\n      return {\n        ...state,\n        selectedCurrency: {\n          source: state.selectedCurrency.target,\n          target: state.selectedCurrency.source\n        },\n        currentValue: {\n          source: state.currentValue.target,\n          target: state.currentValue.source\n        }\n      };\n    }\n\n    case CHANGE_AMOUNT: {\n      const { origin, amount, rate } = action;\n      const opposite = origin === 'source' ? 'target' : 'source';\n\n      if (amount < 0) {\n        return state;\n      }\n\n      const fixedAmount = fixDecimalPoints(amount);\n      const oppositeAmount =\n        origin === 'source'\n          ? Big(fixedAmount).times(rate)\n          : Big(fixedAmount).div(rate);\n\n      return {\n        ...state,\n        currentValue: {\n          [origin]: amount ? Big(fixedAmount).toString() : amount,\n          [opposite]: amount\n            ? fixDecimalPoints(oppositeAmount).toString()\n            : amount\n        }\n      };\n    }\n\n    case EXCHANGE_CURRENCY: {\n      const sourceCurrency = state.selectedCurrency.source;\n      const sourceAmount = state.currentValue.source;\n\n      const targetCurrency = state.selectedCurrency.target;\n      const targetAmount = state.currentValue.target;\n\n      return {\n        ...state,\n        pockets: {\n          ...state.pockets,\n          [sourceCurrency]: {\n            ...state.pockets[sourceCurrency],\n            amount: Big(state.pockets[sourceCurrency].amount)\n              .minus(sourceAmount)\n              .toString()\n          },\n          [targetCurrency]: {\n            ...state.pockets[targetCurrency],\n            amount: Big(state.pockets[targetCurrency].amount)\n              .add(targetAmount)\n              .toString()\n          }\n        },\n        currentValue: {\n          source: '',\n          target: ''\n        }\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\n// Selectors\n\nexport function isExchangeDisabled({\n  selectedCurrency,\n  currentValue,\n  pockets\n}) {\n  const sourceCurrency = selectedCurrency.source;\n  const sourceAmount = currentValue.source;\n\n  return (\n    !sourceAmount ||\n    parseFloat(sourceAmount) > parseFloat(pockets[sourceCurrency].amount)\n  );\n}\n","const initialState = {};\n\n// Actions\n\nexport const SET_EXCHANGE_RATE = 'rate/SET_EXCHANGE_RATE';\n\n// Action creators\n\nexport function setExchangeRate(rates) {\n  return {\n    type: SET_EXCHANGE_RATE,\n    rates\n  };\n}\n\n// Reducers\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case SET_EXCHANGE_RATE: {\n      const { rates } = action;\n\n      return {\n        ...state,\n        [rates.base]: rates.rates\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport exchange from './exchange';\nimport rate from './rate';\n\nexport default combineReducers({\n  exchange,\n  rate\n});\n","import styled from '@emotion/styled';\n\nexport default styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n`;\n","export default {\n  gray: '#f3f4f5',\n  lightGray: '#8b959e',\n  blue: '#0074eb',\n  pink: '#eb008d'\n};\n","import styled from '@emotion/styled';\n\nimport colors from 'colors';\n\nexport default styled.div`\n  max-width: 440px;\n  width: 100%;\n  height: 660px;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  border: 1px solid ${colors.gray};\n  border-radius: 16px;\n  background-color: ${colors.gray};\n  overflow: hidden;\n`;\n","const API_URL = 'https://api.exchangeratesapi.io/latest';\n\nexport const fetchRate = async (source, pockets) => {\n  try {\n    return fetch(\n      `${API_URL}?base=${source}&symbols=${pockets.join(',')}`\n    ).then(res => res.json());\n  } catch (e) {\n    return {};\n  }\n};\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding: 0 12px;\n  background-color: #fff;\n`;\n\nconst CloseBtn = styled.button`\n  border: 0;\n  background-color: transparent;\n  font-size: 28px;\n  cursor: pointer;\n`;\n\nconst Title = styled.h1`\n  font-size: 22px;\n  font-weight: 400;\n  margin-left: 10px;\n`;\n\nconst Header = () => (\n  <Wrapper>\n    <CloseBtn>&times;</CloseBtn>\n    <Title>Exchange</Title>\n  </Wrapper>\n);\n\nexport default Header;\n","import styled from '@emotion/styled';\n\nimport colors from 'colors';\n\nexport default styled.button`\n  background-color: ${colors.pink};\n  color: #fff;\n  font-size: 14px;\n  padding: 12px;\n  width: calc(100% - 36px);\n  margin: 0 18px 20px;\n  border: 0;\n  border-radius: 22px;\n  font-weight: 500;\n  font-size: 16px;\n  cursor: pointer;\n  box-shadow: 0px 4px 8px 2px #eb008d52;\n  transition: background-color 250ms ease-in-out;\n\n  &:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n\n    &:hover {\n      background-color: ${colors.pink};\n    }\n  }\n  &:hover {\n    background-color: #cc097e;\n  }\n`;\n","export default (config = {}) => {\n  const browserLocale = navigator.language;\n\n  return Intl.NumberFormat(browserLocale, { style: 'currency', ...config })\n    .format;\n};\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\n\nimport colors from 'colors';\nimport formatCurrency from 'helpers/formatCurrency';\n\nconst Wrapper = styled.div`\n  color: ${colors.blue};\n  background-color: #fff;\n  border: 2px solid ${colors.gray};\n  padding: 4px 16px;\n  border-radius: 12px;\n  font-size: 14px;\n`;\n\nconst ExchangeRate = ({ selectedCurrency, targetRate }) => {\n  const sourceRateFormat = formatCurrency({\n    currency: selectedCurrency.source,\n    minimumFractionDigits: 0\n  });\n  const targetRateFormat = formatCurrency({\n    currency: selectedCurrency.target,\n    maximumFractionDigits: 4\n  });\n\n  return (\n    <Wrapper>\n      {sourceRateFormat(1)}\n      {' = '}\n      {targetRate ? targetRateFormat(targetRate) : '...'}\n    </Wrapper>\n  );\n};\n\nExchangeRate.propTypes = {\n  selectedCurrency: PropTypes.shape({\n    source: PropTypes.string.isRequired,\n    target: PropTypes.string.isRequired\n  }).isRequired,\n  targetRate: PropTypes.number\n};\n\nexport default ExchangeRate;\n","import styled from '@emotion/styled';\n\nimport colors from 'colors';\n\nexport default styled.button`\n  width: 32px;\n  height: 32px;\n  background-color: #fff;\n  border: 2px solid ${colors.gray};\n  font-size: 14px;\n  border-radius: 100%;\n  color: ${colors.blue};\n  text-align: center;\n  cursor: pointer;\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { changeCurrencyPair, changeAmount } from 'redux/modules/exchange';\n\nimport colors from 'colors';\nimport formatCurrency from 'helpers/formatCurrency';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0 12px;\n  background-color: ${props =>\n    ({\n      source: '#fff',\n      target: colors.gray\n    }[props.origin])};\n  height: 120px;\n`;\n\nconst BalanceWrapper = styled.div`\n  min-width: 130px;\n`;\n\nconst CurrencySelector = styled.select`\n  background-color: transparent;\n  border: 0;\n  font-size: 24px;\n  cursor: pointer;\n`;\n\nconst Balance = styled.div`\n  color: ${props => (props.lowBalance ? 'red' : colors.lightGray)};\n  font-size: 14px;\n  padding-top: 8px;\n  padding-left: 8px;\n`;\n\nexport const ExchangeInput = styled.input`\n  width: 100%;\n  border: 0;\n  font-size: 28px;\n  text-align: right;\n  background-color: transparent;\n  outline: none;\n\n  &::placeholder {\n    color: ${colors.lightGray};\n  }\n`;\n\nconst PocketWrapper = ({\n  origin,\n  currency,\n  balance,\n  amount,\n  rate,\n  lowBalance,\n  supportedPockets,\n  ignoredCurrency,\n  onCurrencyChange,\n  onAmountChange\n}) => (\n  <Wrapper origin={origin}>\n    <BalanceWrapper>\n      <CurrencySelector\n        value={currency}\n        onChange={({ target }) => onCurrencyChange(target.value)}\n      >\n        {supportedPockets\n          .filter(pocket => pocket !== ignoredCurrency)\n          .map(pocket => (\n            <option key={pocket}>{pocket}</option>\n          ))}\n      </CurrencySelector>\n      <Balance lowBalance={origin === 'source' && lowBalance}>\n        Balance: {formatCurrency({ currency })(balance)}\n      </Balance>\n    </BalanceWrapper>\n    <ExchangeInput\n      type=\"number\"\n      autoFocus={origin === 'source'}\n      placeholder=\"0\"\n      min=\"0\"\n      value={`${amount}`}\n      onChange={({ target }) => onAmountChange(target.value, rate)}\n    />\n  </Wrapper>\n);\n\nPocketWrapper.propTypes = {\n  origin: PropTypes.oneOf(['source', 'target']).isRequired,\n  currency: PropTypes.string.isRequired,\n  balance: PropTypes.string.isRequired,\n  amount: PropTypes.string.isRequired,\n  rate: PropTypes.number,\n  lowBalance: PropTypes.bool.isRequired,\n  supportedPockets: PropTypes.array.isRequired,\n  ignoredCurrency: PropTypes.string.isRequired,\n  onCurrencyChange: PropTypes.func.isRequired,\n  onAmountChange: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = ({ exchange, rate }, { origin }) => {\n  const currency = exchange.selectedCurrency[origin];\n  const lowBalance =\n    parseFloat(exchange.currentValue[origin]) >\n    parseFloat(exchange.pockets[currency].amount);\n  const ignoredCurrency =\n    origin === 'source'\n      ? exchange.selectedCurrency.target\n      : exchange.selectedCurrency.source;\n\n  return {\n    supportedPockets: Object.keys(exchange.pockets),\n    currency,\n    balance: exchange.pockets[currency].amount,\n    ignoredCurrency,\n    amount: exchange.currentValue[origin],\n    lowBalance,\n    rate:\n      rate[exchange.selectedCurrency.source] &&\n      rate[exchange.selectedCurrency.source][exchange.selectedCurrency.target]\n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  onCurrencyChange: currency => {\n    dispatch(changeCurrencyPair(ownProps.origin, currency));\n  },\n  onAmountChange: (amount, rate) => {\n    dispatch(changeAmount(ownProps.origin, amount, rate));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PocketWrapper);\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport PageVisibility from 'react-page-visibility';\n\nimport {\n  exchangeCurrency,\n  swapCurrencyPair,\n  isExchangeDisabled\n} from 'redux/modules/exchange';\nimport { setExchangeRate } from 'redux/modules/rate';\nimport { fetchRate } from 'api';\n\nimport Header from 'components/Header';\nimport ExchangeButton from 'components/ExchangeButton';\nimport ExchangeRate from 'components/ExchangeRate';\nimport SwapButton from 'components/SwapButton';\n\nimport PocketWrapper from './PocketWrapper';\n\nconst ContentWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  flex-grow: 1;\n`;\n\nconst InfoRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  margin-top: -16px;\n  padding: 0 12px;\n`;\n\nclass Exchange extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.scheduleRateFetcher(this.props.selectedCurrency.source);\n  }\n\n  componentDidUpdate({ selectedCurrency }) {\n    const shouldFetch =\n      selectedCurrency.source !== this.props.selectedCurrency.source;\n\n    if (shouldFetch) {\n      this.scheduleRateFetcher(this.props.selectedCurrency.source);\n    }\n  }\n\n  componentWillUnmount() {\n    this.clearFetcherInstance();\n  }\n\n  scheduleRateFetcher = source => {\n    const pockets = Object.keys(this.props.pockets).filter(\n      pocket => pocket !== source\n    );\n\n    // Clear interval instance if already there\n    this.clearFetcherInstance();\n\n    this.updateRates(source, pockets);\n    this.fetcherInstance = setInterval(\n      () => this.updateRates(source, pockets),\n      10000\n    );\n  };\n\n  updateRates = async (source, pockets) => {\n    const rates = await fetchRate(source, pockets);\n\n    this.props.setExchangeRate(rates);\n  };\n\n  handleVisibilityChange = isVisible => {\n    if (isVisible) {\n      this.scheduleRateFetcher(this.props.selectedCurrency.source);\n    } else {\n      this.clearFetcherInstance();\n    }\n  };\n\n  clearFetcherInstance = () => {\n    if (!this.fetcherInstance) {\n      return;\n    }\n\n    clearInterval(this.fetcherInstance);\n    this.fetcherInstance = null;\n  };\n\n  render() {\n    const {\n      selectedCurrency,\n      targetRate,\n      exchangeDisabled,\n      swapPockets,\n      exchangeCurrency\n    } = this.props;\n\n    return (\n      <PageVisibility onChange={this.handleVisibilityChange}>\n        <>\n          <Header />\n          <ContentWrapper>\n            <div>\n              <PocketWrapper origin=\"source\" />\n\n              <InfoRow>\n                <SwapButton onClick={swapPockets}>&#8645;</SwapButton>\n                <ExchangeRate\n                  selectedCurrency={selectedCurrency}\n                  targetRate={targetRate}\n                />\n                <div />\n              </InfoRow>\n\n              <PocketWrapper origin=\"target\" />\n            </div>\n            <ExchangeButton\n              disabled={exchangeDisabled}\n              onClick={exchangeCurrency}\n            >\n              Exchange\n            </ExchangeButton>\n          </ContentWrapper>\n        </>\n      </PageVisibility>\n    );\n  }\n}\n\nconst pocketShape = PropTypes.shape({\n  currency: PropTypes.string.isRequired,\n  amount: PropTypes.string.isRequired\n});\n\nExchange.propTypes = {\n  pockets: PropTypes.objectOf(pocketShape).isRequired,\n  targetRate: PropTypes.number,\n  selectedCurrency: PropTypes.shape({\n    source: PropTypes.string.isRequired,\n    target: PropTypes.string.isRequired\n  }).isRequired,\n  exchangeDisabled: PropTypes.bool.isRequired,\n  exchangeCurrency: PropTypes.func.isRequired,\n  swapPockets: PropTypes.func.isRequired,\n  setExchangeRate: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = ({ exchange, rate }) => ({\n  pockets: exchange.pockets,\n  targetRate:\n    rate[exchange.selectedCurrency.source] &&\n    rate[exchange.selectedCurrency.source][exchange.selectedCurrency.target],\n  selectedCurrency: exchange.selectedCurrency,\n  exchangeDisabled: isExchangeDisabled(exchange)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  exchangeCurrency: () => {\n    dispatch(exchangeCurrency());\n  },\n  swapPockets: () => {\n    dispatch(swapCurrencyPair());\n  },\n  setExchangeRate: rates => {\n    dispatch(setExchangeRate(rates));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Exchange);\n","import React from 'react';\nimport { Provider } from 'react-redux';\n\nimport 'normalize.css';\nimport 'index.css';\n\nimport configureStore from 'redux/configureStore';\n\nimport Container from 'components/Container';\nimport AppShell from 'components/AppShell';\nimport Exchange from 'pages/Exchange';\n\nconst store = configureStore({});\n\nconst App = () => (\n  <Provider store={store}>\n    <Container>\n      <AppShell>\n        <Exchange />\n      </AppShell>\n    </Container>\n  </Provider>\n);\n\nexport default App;\n","import { createStore } from 'redux';\n\nimport rootReducer from './modules';\n\nexport default (initialState = {}) =>\n  createStore(\n    rootReducer,\n    initialState,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  );\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}